// <auto-generated />
using System;
using DataSource.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataSource.Migrations
{
    [DbContext(typeof(EcommerceDBContext))]
    [Migration("20241114103641_RemoveProductPrice")]
    partial class RemoveProductPrice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3691),
                            DiscountAmount = 100,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3692)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3693),
                            DiscountAmount = 199,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3694)
                        });
                });

            modelBuilder.Entity("Domain.Entities.FavoriteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("Domain.Entities.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Kinds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "clothes"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PayWay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecieveStore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecieveWay")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShippingPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Domain.Entities.OrderStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StepStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSteps");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<byte>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("TenantConfigId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HowToWash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoverImg = "http://localhost:9000/coat1.jpg",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3485),
                            Features = "其實我也不知道要說什麼...a",
                            HowToWash = "洗衣機（水溫40度）, 不可乾洗, 不可烘乾。本商品會在流汗或淋雨弄濕時，或因摩擦而染色到其他衣物上，敬請注意。",
                            Material = "聚酯纖維, 聚氨酯纖維",
                            Title = "超時尚流蘇几皮外套",
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3495)
                        },
                        new
                        {
                            Id = 2,
                            CoverImg = "http://localhost:9000/coat4.jpg",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3497),
                            Features = "其實我也不知道要說什麼...a",
                            HowToWash = "洗衣機（水溫40度）, 不可乾洗, 不可烘乾。本商品會在流汗或淋雨弄濕時，或因摩擦而染色到其他衣物上，敬請注意。",
                            Material = "聚酯纖維, 聚氨酯纖維",
                            Title = "紫色格紋大衣",
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3497)
                        },
                        new
                        {
                            Id = 3,
                            CoverImg = "http://localhost:9000/coat3.jpg",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3499),
                            Features = "其實我也不知道要說什麼...a",
                            HowToWash = "洗衣機（水溫40度）, 不可乾洗, 不可烘乾。本商品會在流汗或淋雨弄濕時，或因摩擦而染色到其他衣物上，敬請注意。",
                            Material = "聚酯纖維, 聚氨酯纖維",
                            Title = "超質感綠色皮衣",
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3499)
                        },
                        new
                        {
                            Id = 4,
                            CoverImg = "http://localhost:9000/coat2.jpg",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3500),
                            Features = "其實我也不知道要說什麼...a",
                            HowToWash = "洗衣機（水溫40度）, 不可乾洗, 不可烘乾。本商品會在流汗或淋雨弄濕時，或因摩擦而染色到其他衣物上，敬請注意。",
                            Material = "聚酯纖維, 聚氨酯纖維",
                            Title = "海島風情黑色短袖襯衫",
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3500)
                        },
                        new
                        {
                            Id = 5,
                            CoverImg = "http://localhost:9000/coat5.jpg",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3501),
                            Features = "其實我也不知道要說什麼...a",
                            HowToWash = "洗衣機（水溫40度）, 不可乾洗, 不可烘乾。本商品會在流汗或淋雨弄濕時，或因摩擦而染色到其他衣物上，敬請注意。",
                            Material = "聚酯纖維, 聚氨酯纖維",
                            Title = "帥氣單寧",
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3502)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiscountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDiscounts");
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "http://localhost:9000/coat1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "http://localhost:9000/coat2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "http://localhost:9000/coat3.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "http://localhost:9000/coat4.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "http://localhost:9000/coat5.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "http://localhost:9000/coat2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "http://localhost:9000/coat3.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "http://localhost:9000/coat4.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "http://localhost:9000/coat5.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "http://localhost:9000/coat1.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "http://localhost:9000/coat3.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "http://localhost:9000/coat5.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "http://localhost:9000/coat4.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "http://localhost:9000/coat2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "http://localhost:9000/coat1.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 16,
                            ImageUrl = "http://localhost:9000/coat3.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 17,
                            ImageUrl = "http://localhost:9000/coat5.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 18,
                            ImageUrl = "http://localhost:9000/coat4.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 19,
                            ImageUrl = "http://localhost:9000/coat2.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 20,
                            ImageUrl = "http://localhost:9000/coat1.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 21,
                            ImageUrl = "http://localhost:9000/coat3.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 22,
                            ImageUrl = "http://localhost:9000/coat5.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 23,
                            ImageUrl = "http://localhost:9000/coat4.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 24,
                            ImageUrl = "http://localhost:9000/coat2.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 25,
                            ImageUrl = "http://localhost:9000/coat1.jpg",
                            ProductId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("KindId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KindId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductKinds");
                });

            modelBuilder.Entity("Domain.Entities.ProductMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("Domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            TagId = 4
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 2,
                            TagId = 2
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 3,
                            TagId = 3
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 3,
                            TagId = 5
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 3,
                            TagId = 5
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 4,
                            TagId = 6
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 5,
                            TagId = 8
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 5,
                            TagId = 8
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 5,
                            TagId = 9
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SizeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantPrice")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3626),
                            ProductId = 1,
                            SKU = "BLACK-S",
                            SizeId = 1,
                            Stock = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3626),
                            VariantPrice = 99
                        },
                        new
                        {
                            Id = 2,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3628),
                            ProductId = 1,
                            SKU = "BLACK-L",
                            SizeId = 3,
                            Stock = 16,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3628),
                            VariantPrice = 283
                        },
                        new
                        {
                            Id = 3,
                            Color = "米",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3630),
                            ProductId = 1,
                            SKU = "WHEAT-L",
                            SizeId = 3,
                            Stock = 3,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3630),
                            VariantPrice = 150
                        },
                        new
                        {
                            Id = 4,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3631),
                            ProductId = 1,
                            SKU = "BROWN-M",
                            SizeId = 2,
                            Stock = 17,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3632),
                            VariantPrice = 199
                        },
                        new
                        {
                            Id = 5,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3633),
                            ProductId = 1,
                            SKU = "BROWN-L",
                            SizeId = 3,
                            Stock = 20,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3633),
                            VariantPrice = 211
                        },
                        new
                        {
                            Id = 6,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3634),
                            ProductId = 2,
                            SKU = "BLACK-S",
                            SizeId = 1,
                            Stock = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3635),
                            VariantPrice = 99
                        },
                        new
                        {
                            Id = 7,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3636),
                            ProductId = 2,
                            SKU = "BLACK-L",
                            SizeId = 3,
                            Stock = 16,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3636),
                            VariantPrice = 283
                        },
                        new
                        {
                            Id = 8,
                            Color = "米",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3637),
                            ProductId = 2,
                            SKU = "WHEAT-L",
                            SizeId = 3,
                            Stock = 3,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3638),
                            VariantPrice = 150
                        },
                        new
                        {
                            Id = 9,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3639),
                            ProductId = 2,
                            SKU = "BROWN-M",
                            SizeId = 2,
                            Stock = 17,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3639),
                            VariantPrice = 199
                        },
                        new
                        {
                            Id = 10,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3640),
                            ProductId = 3,
                            SKU = "BLACK-S",
                            SizeId = 1,
                            Stock = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3641),
                            VariantPrice = 99
                        },
                        new
                        {
                            Id = 11,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3642),
                            ProductId = 3,
                            SKU = "BLACK-L",
                            SizeId = 3,
                            Stock = 16,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3642),
                            VariantPrice = 283
                        },
                        new
                        {
                            Id = 12,
                            Color = "米",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3643),
                            ProductId = 3,
                            SKU = "WHEAT-L",
                            SizeId = 3,
                            Stock = 3,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3644),
                            VariantPrice = 150
                        },
                        new
                        {
                            Id = 13,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3645),
                            ProductId = 3,
                            SKU = "BROWN-M",
                            SizeId = 2,
                            Stock = 17,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3645),
                            VariantPrice = 199
                        },
                        new
                        {
                            Id = 14,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3646),
                            ProductId = 3,
                            SKU = "BROWN-L",
                            SizeId = 3,
                            Stock = 20,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3647),
                            VariantPrice = 211
                        },
                        new
                        {
                            Id = 15,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3648),
                            ProductId = 4,
                            SKU = "BLACK-S",
                            SizeId = 1,
                            Stock = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3648),
                            VariantPrice = 99
                        },
                        new
                        {
                            Id = 16,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3649),
                            ProductId = 4,
                            SKU = "BLACK-L",
                            SizeId = 3,
                            Stock = 16,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3650),
                            VariantPrice = 283
                        },
                        new
                        {
                            Id = 17,
                            Color = "米",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3651),
                            ProductId = 4,
                            SKU = "WHEAT-L",
                            SizeId = 3,
                            Stock = 3,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3651),
                            VariantPrice = 150
                        },
                        new
                        {
                            Id = 18,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3652),
                            ProductId = 4,
                            SKU = "BROWN-M",
                            SizeId = 2,
                            Stock = 17,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3652),
                            VariantPrice = 199
                        },
                        new
                        {
                            Id = 19,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3653),
                            ProductId = 4,
                            SKU = "BROWN-L",
                            SizeId = 3,
                            Stock = 20,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3654),
                            VariantPrice = 211
                        },
                        new
                        {
                            Id = 20,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3655),
                            ProductId = 5,
                            SKU = "BLACK-S",
                            SizeId = 1,
                            Stock = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3655),
                            VariantPrice = 99
                        },
                        new
                        {
                            Id = 21,
                            Color = "黑",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3656),
                            ProductId = 5,
                            SKU = "BLACK-L",
                            SizeId = 3,
                            Stock = 16,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3657),
                            VariantPrice = 283
                        },
                        new
                        {
                            Id = 22,
                            Color = "米",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3658),
                            ProductId = 5,
                            SKU = "WHEAT-L",
                            SizeId = 3,
                            Stock = 3,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3658),
                            VariantPrice = 150
                        },
                        new
                        {
                            Id = 23,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3659),
                            ProductId = 5,
                            SKU = "BROWN-M",
                            SizeId = 2,
                            Stock = 17,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3659),
                            VariantPrice = 199
                        },
                        new
                        {
                            Id = 24,
                            Color = "咖啡",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3661),
                            ProductId = 5,
                            SKU = "BROWN-L",
                            SizeId = 3,
                            Stock = 20,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3661),
                            VariantPrice = 211
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductVariantDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiscountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("VariantId");

                    b.ToTable("ProductVariantDiscounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3711),
                            DiscountId = 1,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3711),
                            VariantId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3712),
                            DiscountId = 1,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3713),
                            VariantId = 4
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3714),
                            DiscountId = 1,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3714),
                            VariantId = 8
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3715),
                            DiscountId = 1,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3715),
                            VariantId = 11
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3716),
                            DiscountId = 1,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3716),
                            VariantId = 12
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3717),
                            DiscountId = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3718),
                            VariantId = 19
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3718),
                            DiscountId = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3719),
                            VariantId = 22
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3719),
                            DiscountId = 2,
                            UpdatedAt = new DateTime(2024, 11, 14, 18, 36, 41, 386, DateTimeKind.Local).AddTicks(3720),
                            VariantId = 24
                        });
                });

            modelBuilder.Entity("Domain.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipmentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Domain.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SizeValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SizeValue = "S"
                        },
                        new
                        {
                            Id = 2,
                            SizeValue = "M"
                        },
                        new
                        {
                            Id = 3,
                            SizeValue = "L"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "t-shirt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "shirt"
                        },
                        new
                        {
                            Id = 3,
                            Name = "jeans"
                        },
                        new
                        {
                            Id = 4,
                            Name = "shorts"
                        },
                        new
                        {
                            Id = 5,
                            Name = "windcoat"
                        },
                        new
                        {
                            Id = 6,
                            Name = "knitting"
                        },
                        new
                        {
                            Id = 7,
                            Name = "accessories"
                        },
                        new
                        {
                            Id = 8,
                            Name = "new-arrival"
                        },
                        new
                        {
                            Id = 9,
                            Name = "limit-time-offer"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TenantConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HashIV")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TenantConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HashIV = "EkRm7iFT261dpevs",
                            MerchantId = "3002607",
                            SecretKey = "pwFHCqoQZGmho4w6"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserShipAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecieveStore")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecieveWay")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserShipAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Domain.Entities.FavoriteProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.UserShipAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Domain.Entities.OrderStep", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderSteps")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Domain.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TenantConfig", "TenantConfig")
                        .WithMany("Payments")
                        .HasForeignKey("TenantConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TenantConfig");
                });

            modelBuilder.Entity("Domain.Entities.ProductDiscount", b =>
                {
                    b.HasOne("Domain.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductKind", b =>
                {
                    b.HasOne("Domain.Entities.Kind", "Kind")
                        .WithMany("ProductKinds")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductKinds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kind");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductMaterial", b =>
                {
                    b.HasOne("Domain.Entities.Material", "Material")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductTag", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Size", "Size")
                        .WithMany("ProductVariants")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Domain.Entities.ProductVariantDiscount", b =>
                {
                    b.HasOne("Domain.Entities.Discount", "Discount")
                        .WithMany("ProductVariantDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductVariantDiscounts")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.UserShipAddress", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserShipAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.Navigation("ProductVariantDiscounts");
                });

            modelBuilder.Entity("Domain.Entities.Kind", b =>
                {
                    b.Navigation("ProductKinds");
                });

            modelBuilder.Entity("Domain.Entities.Material", b =>
                {
                    b.Navigation("ProductMaterials");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderSteps");

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductKinds");

                    b.Navigation("ProductMaterials");

                    b.Navigation("ProductTags");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductVariantDiscounts");
                });

            modelBuilder.Entity("Domain.Entities.Size", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Domain.Entities.TenantConfig", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("UserShipAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
